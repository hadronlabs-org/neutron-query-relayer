// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainQueriesRegisteredQueryReader is a Reader for the NeutronInterchainQueriesRegisteredQuery structure.
type NeutronInterchainQueriesRegisteredQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NeutronInterchainQueriesRegisteredQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNeutronInterchainQueriesRegisteredQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNeutronInterchainQueriesRegisteredQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNeutronInterchainQueriesRegisteredQueryOK creates a NeutronInterchainQueriesRegisteredQueryOK with default headers values
func NewNeutronInterchainQueriesRegisteredQueryOK() *NeutronInterchainQueriesRegisteredQueryOK {
	return &NeutronInterchainQueriesRegisteredQueryOK{}
}

/*
NeutronInterchainQueriesRegisteredQueryOK describes a response with status code 200, with default header values.

A successful response.
*/
type NeutronInterchainQueriesRegisteredQueryOK struct {
	Payload *NeutronInterchainQueriesRegisteredQueryOKBody
}

// IsSuccess returns true when this neutron interchain queries registered query o k response has a 2xx status code
func (o *NeutronInterchainQueriesRegisteredQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this neutron interchain queries registered query o k response has a 3xx status code
func (o *NeutronInterchainQueriesRegisteredQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this neutron interchain queries registered query o k response has a 4xx status code
func (o *NeutronInterchainQueriesRegisteredQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this neutron interchain queries registered query o k response has a 5xx status code
func (o *NeutronInterchainQueriesRegisteredQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this neutron interchain queries registered query o k response a status code equal to that given
func (o *NeutronInterchainQueriesRegisteredQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the neutron interchain queries registered query o k response
func (o *NeutronInterchainQueriesRegisteredQueryOK) Code() int {
	return 200
}

func (o *NeutronInterchainQueriesRegisteredQueryOK) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] neutronInterchainQueriesRegisteredQueryOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainQueriesRegisteredQueryOK) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] neutronInterchainQueriesRegisteredQueryOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainQueriesRegisteredQueryOK) GetPayload() *NeutronInterchainQueriesRegisteredQueryOKBody {
	return o.Payload
}

func (o *NeutronInterchainQueriesRegisteredQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainQueriesRegisteredQueryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNeutronInterchainQueriesRegisteredQueryDefault creates a NeutronInterchainQueriesRegisteredQueryDefault with default headers values
func NewNeutronInterchainQueriesRegisteredQueryDefault(code int) *NeutronInterchainQueriesRegisteredQueryDefault {
	return &NeutronInterchainQueriesRegisteredQueryDefault{
		_statusCode: code,
	}
}

/*
NeutronInterchainQueriesRegisteredQueryDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type NeutronInterchainQueriesRegisteredQueryDefault struct {
	_statusCode int

	Payload *NeutronInterchainQueriesRegisteredQueryDefaultBody
}

// IsSuccess returns true when this neutron interchain queries registered query default response has a 2xx status code
func (o *NeutronInterchainQueriesRegisteredQueryDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this neutron interchain queries registered query default response has a 3xx status code
func (o *NeutronInterchainQueriesRegisteredQueryDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this neutron interchain queries registered query default response has a 4xx status code
func (o *NeutronInterchainQueriesRegisteredQueryDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this neutron interchain queries registered query default response has a 5xx status code
func (o *NeutronInterchainQueriesRegisteredQueryDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this neutron interchain queries registered query default response a status code equal to that given
func (o *NeutronInterchainQueriesRegisteredQueryDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the neutron interchain queries registered query default response
func (o *NeutronInterchainQueriesRegisteredQueryDefault) Code() int {
	return o._statusCode
}

func (o *NeutronInterchainQueriesRegisteredQueryDefault) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] NeutronInterchainQueriesRegisteredQuery default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainQueriesRegisteredQueryDefault) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] NeutronInterchainQueriesRegisteredQuery default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainQueriesRegisteredQueryDefault) GetPayload() *NeutronInterchainQueriesRegisteredQueryDefaultBody {
	return o.Payload
}

func (o *NeutronInterchainQueriesRegisteredQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainQueriesRegisteredQueryDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryDefaultBody neutron interchain queries registered query default body
swagger:model NeutronInterchainQueriesRegisteredQueryDefaultBody
*/
type NeutronInterchainQueriesRegisteredQueryDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this neutron interchain queries registered query default body
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainQueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainQueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchain queries registered query default body based on the context it is used
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainQueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainQueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0
*/
type NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchain queries registered query default body details items0
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchain queries registered query default body details items0 based on context it is used
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryOKBody neutron interchain queries registered query o k body
swagger:model NeutronInterchainQueriesRegisteredQueryOKBody
*/
type NeutronInterchainQueriesRegisteredQueryOKBody struct {

	// registered query
	RegisteredQuery *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery `json:"registered_query,omitempty"`
}

// Validate validates this neutron interchain queries registered query o k body
func (o *NeutronInterchainQueriesRegisteredQueryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegisteredQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBody) validateRegisteredQuery(formats strfmt.Registry) error {
	if swag.IsZero(o.RegisteredQuery) { // not required
		return nil
	}

	if o.RegisteredQuery != nil {
		if err := o.RegisteredQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchain queries registered query o k body based on the context it is used
func (o *NeutronInterchainQueriesRegisteredQueryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegisteredQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBody) contextValidateRegisteredQuery(ctx context.Context, formats strfmt.Registry) error {

	if o.RegisteredQuery != nil {

		if swag.IsZero(o.RegisteredQuery) { // not required
			return nil
		}

		if err := o.RegisteredQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery neutron interchain queries registered query o k body registered query
swagger:model NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery
*/
type NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery struct {

	// The IBC connection ID for getting ConsensusState to verify proofs
	ConnectionID string `json:"connection_id,omitempty"`

	// The unique id of the registered query.
	ID string `json:"id,omitempty"`

	// The KV-storage keys for which we want to get values from remote chain
	Keys []*NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 `json:"keys"`

	// The local chain last block height when the query result was updated.
	LastSubmittedResultLocalHeight string `json:"last_submitted_result_local_height,omitempty"`

	// last submitted result remote height
	LastSubmittedResultRemoteHeight *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight `json:"last_submitted_result_remote_height,omitempty"`

	// The address that registered the query.
	Owner string `json:"owner,omitempty"`

	// The query type identifier: `kv` or `tx` now
	QueryType string `json:"query_type,omitempty"`

	// The filter for transaction search ICQ
	TransactionsFilter string `json:"transactions_filter,omitempty"`

	// Parameter that defines how often the query must be updated.
	UpdatePeriod string `json:"update_period,omitempty"`
}

// Validate validates this neutron interchain queries registered query o k body registered query
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastSubmittedResultRemoteHeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) validateLastSubmittedResultRemoteHeight(formats strfmt.Registry) error {
	if swag.IsZero(o.LastSubmittedResultRemoteHeight) { // not required
		return nil
	}

	if o.LastSubmittedResultRemoteHeight != nil {
		if err := o.LastSubmittedResultRemoteHeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "last_submitted_result_remote_height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "last_submitted_result_remote_height")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchain queries registered query o k body registered query based on the context it is used
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastSubmittedResultRemoteHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Keys); i++ {

		if o.Keys[i] != nil {

			if swag.IsZero(o.Keys[i]) { // not required
				return nil
			}

			if err := o.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) contextValidateLastSubmittedResultRemoteHeight(ctx context.Context, formats strfmt.Registry) error {

	if o.LastSubmittedResultRemoteHeight != nil {

		if swag.IsZero(o.LastSubmittedResultRemoteHeight) { // not required
			return nil
		}

		if err := o.LastSubmittedResultRemoteHeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "last_submitted_result_remote_height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainQueriesRegisteredQueryOK" + "." + "registered_query" + "." + "last_submitted_result_remote_height")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 neutron interchain queries registered query o k body registered query keys items0
swagger:model NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0
*/
type NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 struct {

	// Key you want to read from the storage
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// Path (storage prefix) to the storage where you want to read value by key (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
	Path string `json:"path,omitempty"`
}

// Validate validates this neutron interchain queries registered query o k body registered query keys items0
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchain queries registered query o k body registered query keys items0 based on context it is used
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight The remote chain last block height & revision number when the query result was updated.
swagger:model NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight
*/
type NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight struct {

	// revision height
	RevisionHeight string `json:"revision_height,omitempty"`

	// revision number
	RevisionNumber string `json:"revision_number,omitempty"`
}

// Validate validates this neutron interchain queries registered query o k body registered query last submitted result remote height
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchain queries registered query o k body registered query last submitted result remote height based on context it is used
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainQueriesRegisteredQueryOKBodyRegisteredQueryLastSubmittedResultRemoteHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
